=head1 NAME

psh2 - Poly/Perl SHell

=for README
Please read the perlpod manpage! Pay particular attention to the markup
sequences (B<>, C<>, I<>, etc.).

=head1 SYNOPSIS

The Perl Shell documentation has been split into a number of different
manpages:

L<psh2|psh2>         This overview

=head1 DESCRIPTION

B<psh2> is a Perl program which executes a read-eval loop with enough
options so that general behavior reasonably similar to more
traditional shells like 'B<sh>' or 'B<bash>' can be achieved, while still
allowing arbitrary perl expressions to be evaluated.

=head1 OPTIONS

The command-line arguments to B<psh2> are:

 psh2 [-h] [-V] [-F] [-f] [-c COMMAND] [FILE1 FILE2 ...]

=over 4

=item * B<-h>

Shows short usage information about B<psh2> invocation.

=item * B<-V>

Prints the version and exits

=item * B<-F>

Force reading rc files even if they normally would not be read
(e.g. if you specified B<-c> or files on the commandline)

=item * B<-f>

No pshrc files will be read and executed.

=item * B<-c> I<string>

If the B<-c> flag is present, then commands are read from
C<string>, and then B<psh> exits. In particular, any FILE1
... arguments will be ignored.

=back

If any FILE1 ... arguments are specified on the command line, they
will be read and executed and then B<psh> will exit. Otherwise, B<psh>
will enter an interactive command loop.

=head2 GLOBBING

Globbing is used to expand filenames against patterns. B<psh2> understands
two globbing modes, simple and advanced:

In simple mode, occurrances of '~' at the beginning of a word will
be replaced by the appropriate home directory and '*' and '?' behave
like in all shells (* matches any string and ? matches exactly one
character). Examples:

   C<ls *.pl>
   C<rm */*~>

Advanced mode is entered if you embed a glob completely in C<[]>. Advanced mode
basically corresponds to Perl regular expressions, but C</> will always
match a directory level. Examples:

   C<ls [.*\.pl]> (same as ls *.pl above)
   C<rm [.*/.*~]> (same as rm */*~ above)
   C<ls [[^a-zA-Z]+]> (matches only alphabetical names)

Advanced mode also understands additional options which are passed in
C<()> parens just before the end of the pattern. These additional options
are where the real power of this mode can shine. The B<i> option will
perform case insensitive matching, all other letters (rwxoRWXOzsfdlpSugkTB)
correspond to the Perl filetest of the same name. Examples:

   C<ls [c.*(i)]>    will match all files starting with c or C
   C<ls [.*(f)]>     matches all plain files
   C<ls [(o)]>      matches all files owned by you
   C<ls [(z)]>      matches all files of zero length

If you're only interested in applying an additional option, you can also completely leave out the .*

In addition, Perl Shell knows the very powerful '**' globbing,
replacing many C<find>s in your daily work. '**' will be replaced
by 'current directories and all sub directories'. For example:

    grep foo lib/**/*.pm

will search for foo in all *.pm files which are somewhere
(recursivly) within the lib directory. The '**' globbing is available
in both simple, as well as advanced mode:

    rm [**(z)]

would delete all zero length files from the current directory and all
subdirectories.

=head2 REDIRECTS

The standard output may be redirected to a file with

    command > file

and the standard input may be taken from a file with

    command < file

File descriptors other than 0 and 1 may be specified in an rc-like
syntax.

To redirect standard error to a file use:

    command >[2] file

(this is 'command 2> file' in sh-derivatives! sh-syntax is not
supported)

To redirect both, standard output and standard error use:

   command >[all] file

or the tcsh compatible version

   command >& file

It's also possible to redirect to opened Perl filehandles. If you e.g.
opened a handle "FOO" for writing you may use:

   command >[=FOO]

to write to that filehandle.

=head2 PIPELINES

Pipelines are used to construct processing chains.

    cat a.txt b.txt | wc -l

This is the same as in other shells - standard output of the first
command will be standard input of the second command.

To redirect different file descriptors, use e.g.

    command |[5] command2

to redirect file descriptor 5 to standard input of command.

It is also possible to redirect to a different filedescriptor than
standard input for the right-hand command:

    command |[1=5] command2

will redirect standard output from the first command to a newly opened
stream on file descriptor 5 for command. Thus, 'command | command' is
only a short hand version of 'command |[1=0] command'.

An alias is provided for piping standard error and standard output at
the same time:

    command |[all] command2

will pipe both to command2 and is so an easier to remember version of

    command >[2=1] | command2

=head2 BUILT-IN FUNCTIONS

A list of built in functions is available from within C<psh> using
the "help" command.

For details about the implementation of built-ins, please see the
B<pshdevel> manpage.

=head2 CALLING LANGUAGES

In addition to the native psh syntax, the shell can also execute perl code
as well as code in other languages for which modules were installed. psh2
currently comes with support for Perl and C. The syntax is straightforward:

    languagename: code

For examole:

    perl: print "Hello world!\n"

Please note, that the shell metacharacter parsing still happens - as soon as
e.g. a ; is encountered, psh returns to shell syntax again. To use longer
language blocks, simply wrap the code in { }:

    perl: { print "Hello"; print " world!" }

=head1 SPEED AND LIMITATIONS

Depending on the exact commands, B<psh2> is between 2-5 times as fast as
B<psh1> and between 3-10 times slower than B<bash>. Startup time of B<psh2>
is largely determined by the time B<perl> needs to read in the
files belonging to B<psh2>.

All versions of B<psh> are designed for interactive use. We believe that
in an interactive environment, neither the large memory usage of B<psh>
(between 2 and 6 MB, depending on your system, perl version and psh
configuration) nor the slower speed compared to pure perl or the
different other shells are that important.
		
=head1 COPYRIGHT

Copyright (C) 1999-2004 psh2 Core Team. All rights reserved.
This script is free software. It may be copied or modified according
to the same terms as Perl itself.

 E<lt>F<warp-psh@spin.de>E<gt>
 E<lt>F<gregor@focusresearch.com>E<gt>

=cut
