CHANGES

------------------------------------------------------------
CVS HEAD
------------------------------------------------------------


1999-12-14 warp:
 Internal:
  * The builtin eval strategy now checks the Psh::Builtins
    namespace for a function with the name of the builtin
	after it checked %built_ins
  * Fixed the initialization so the short hostname is
    calculated from the longhost name instead of calling
	hostname -s
  * Moved almost all code from psh into Psh, Psh::Builtins
    and Psh::Util
  * Added portability infrastructure
  * Working Win32 port !!! (though it has limited features)
  * Added new eval strategy "fallback_builtin" - builtins of
    that type (currently searched in package Psh::Builtins::Fallback)
    will be executed AFTER no program of that name was found.
	This allows to simulate common commands like 'ls' and
	'env' on systems not having such binaries
  * Removed perlfunc again from the list of default strategies
    after it caused too many namespace collisions. I tried to
	fix it by adding a minimum argument number but it did not
	help either. Commands like mkdir, rmdir, chmod etc. MUST
	be accessible without escape in the default settings I
	think

 Features:
  * Changed builtin alias so that 'alias name' displays the
    alias definition for that name
  * Perl Symbol completion now supports package names and
    package name completion
  * Filename Completion respects the FIGNORE environment
    variable now
  * New Perl Hashkey completion will TAB complete the name
    of keys for Perl hashes (if they are not written in quotes)
  * The 'cd' builtin respects CDPATH now and sets OLDPWD
  * Environment variable SHELL is set to the path to psh
  * New builtin 'unalias'
  * It's now possible to do "bg commandname" (e.g. "bg emacs")
    fg has the same behaviour for consistency
  * Added 'env' builtin. On systems with an env binary installed
    it will use the binary, on other systems (namely Win32) it
	will print a list of environment variables
  * Variables for bookmark completion are now
    @Psh::Completion::bookmarks and @Psh::Completion::netprograms
  * Support for user defined completions by
    %Psh::Completion::custom_completions

------------------------------------------------------------
0.004                                           [1999-12-13]
------------------------------------------------------------

This release fixes bugs, refactors the code, and adds the
following features:

  * Background process management much more like bash.

  * Perl code in addition to executables may be put in the
    background.

  * Pipelines.

  * Initial internationalization.

  * New built-ins: 'alias', 'export', 'setenv'.

  * A flexible set of evaluation strategies that can be
    selected or reordered by setting a configuration
    variable.

  * Prompt strings can have escapes like \07 (ASCII BEL) or
    \10 (ASCII LF).

  * avoided trying to save history if there wasn't even a
    ReadLine module

  * added $psh::debugging variable to hold the debugging
    state, so it can be turned on and off in a running psh

  * A $psh::echo variable to control whether perl results of
	evaluation are printed.

  * The which builtin now shows which strategy will apply to
	a given command line

  * Grab more input automatically if <<BLOCK appears
	anywhere on the line, or if the line ends with an open
	brace.

  * results of psh::which searches are hashed.

  * Thorough documentation of every user-accessible variable
	and function


------------------------------------------------------------
0.003
------------------------------------------------------------

Contributions from Markus Peter:

  * Rudimentary background jobs handling and job management.

  * Signal handling.

  * Filename completion.

  * Updates to history handling.

  * Flexible %built_ins mechanism for adding built-in
    functions.

  * Smart mode is on by default.


------------------------------------------------------------
0.00205
------------------------------------------------------------

  * Changed prompting to pass prompt string into iget(),
    which passes it on to Term::ReadLine::readline or
    prints it out if the ReadLine module is not available.
    Thanks to Sam Tregar and "tmb at lumo.com".

  * Changed history handling so that empty lines and those
    consisting of entirely whitespace are not recorded.

  * Fixed a couple of typos.

  * Changed the regular expression for "smart mode" to
    allow "vi +3 psh" in addition to "ls -l".

  * Now uses Getopt::Std for option processing.

  * Fixed the code that detects the presence of
    Term::ReadLine.

  * Made more use of debug mode to print out advisory
    information.

  * Use zero instead of undef to set Term::ReadLine::MinLine
    so that we don't get undef usage trouble in the guts of
    Term::ReadLine::Gnu.


------------------------------------------------------------
0.00204
------------------------------------------------------------

  * Added a bunch of stuff to the TODO file.

  * Added parens around each part of the $interactive
    detection expression.

  * Prompt variables are now dealt with via %prompt_vars,
    which can be modified, so that custom prompt variables
    can be created.

  * Added %built_ins.


------------------------------------------------------------
0.00203
------------------------------------------------------------

  * Fixed typo that caused a bug where prompt variable "$"
    didn't work. Thanks to John Labovitz.


------------------------------------------------------------
0.00202
------------------------------------------------------------


------------------------------------------------------------
0.00201
------------------------------------------------------------


------------------------------------------------------------
0.002
------------------------------------------------------------


------------------------------------------------------------
0.001
------------------------------------------------------------

Initial release


