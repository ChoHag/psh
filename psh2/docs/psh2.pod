=head1 NAME

psh2 - Poly/Perl SHell

=for README
Please read the perlpod manpage! Pay particular attention to the markup
sequences (B<>, C<>, I<>, etc.).

=head1 SYNOPSIS

The Perl Shell documentation has been split into a number of different
manpages:

L<psh2|psh2>         This overview

=head1 DESCRIPTION

B<psh2> is a Perl program which executes a read-eval loop with enough
options so that general behavior reasonably similar to more
traditional shells like 'B<sh>' or 'B<bash>' can be achieved, while still
allowing arbitrary perl expressions to be evaluated.

=head1 OPTIONS

The command-line arguments to B<psh2> are:

 psh2 [-h] [-V] [-F] [-f] [-c COMMAND] [FILE1 FILE2 ...]

=over 4

=item * B<-h>

Shows short usage information about B<psh2> invocation.

=item * B<-V>

Prints the version and exits

=item * B<-F>

Force reading rc files even if they normally would not be read
(e.g. if you specified B<-c> or files on the commandline)

=item * B<-f>

No pshrc files will be read and executed.

=item * B<-c> I<string>

If the B<-c> flag is present, then commands are read from
C<string>, and then B<psh> exits. In particular, any FILE1
... arguments will be ignored.

=back

If any FILE1 ... arguments are specified on the command line, they
will be read and executed and then B<psh> will exit. Otherwise, B<psh>
will enter an interactive command loop.

=head2 GLOBBING

Globbing is used to expand filenames against patterns. B<psh2> understands
two globbing modes, simple and advanced:

In simple mode, occurrances of '~' at the beginning of a word will
be replaced by the appropriate home directory and '*' and '?' behave
like in all shells (* matches any string and ? matches exactly one
character). Examples:

   C<ls *.pl>
   C<rm */*~>

Advanced mode is entered if you embed some text in C<[]>. Advanced mode
basically corresponds to Perl regular expressions, but C</> will always
match a directory level. Examples:

   C<ls [.*\.pl]> (same as ls *.pl above)
   C<rm [.*/.*~]> (same as rm */*~ above)
   C<ls [[^a-zA-Z]+]> (matches only alphabetical names)

Advanced mode also understands additional options which are passed in
C<()> parens just before the end of the pattern. These additional options
are where the real power of this mode can shine. The B<i> option will
perform case insensitive matching, all other letters (rwxoRWXOzsfdlpSugkTB)
correspond to the Perl filetest of the same name. Examples:

   C<ls [c.*(i)]>    will match all files starting with c or C
   C<ls [*(f)]>      matches all plain files
   C<ls [*/*(o)]>    matches all files owned by you
   C<ls [*(z)]>      matches all files of zero length

In addition, Perl Shell knows the very powerful '**' globbing,
replacing many C<find>s in your daily work. '**' will be replaced
by 'current directories and all sub directories'. For example:

    grep foo lib/**/*.pm

will search for foo in all *.pm files which are somewhere
(recursivly) within the lib directory. The '**' globbing is available
in both simple, as well as advanced mode:

    rm [**(z)]

would delete all zero length files from the current directory and all
subdirectories.

=head2 REDIRECTS

The standard output may be redirected to a file with

    command > file

and the standard input may be taken from a file with

    command < file

File descriptors other than 0 and 1 may be specified in an rc-like
syntax.

To redirect standard error to a file use:

    command >[2] file

(this is 'command 2> file' in sh-derivatives! sh-syntax is not
supported)

To redirect both, standard output and standard error use:

   command >[all] file

or the tcsh compatible version

   command >& file

It's also possible to redirect to opened Perl filehandles. If you e.g.
opened a handle "FOO" for writing you may use:

   command >[=FOO]

to write to that filehandle.

=head2 PIPELINES

Pipelines are used to construct processing chains.

    cat a.txt b.txt | wc -l

This is the same as in other shells - standard output of the first
command will be standard input of the second command.

To redirect different file descriptors, use e.g.

    command |[5] command2

to redirect file descriptor 5 to standard input of command.

It is also possible to redirect to a different filedescriptor than
standard input for the right-hand command:

    command |[1=5] command2

will redirect standard output from the first command to a newly opened
stream on file descriptor 5 for command. Thus, 'command | command' is
only a short hand version of 'command |[1=0] command'.

An alias is provided for piping standard error and standard output at
the same time:

    command |[all] command2

will pipe both to command2 and is so an easier to remember version of

    command >[2=1] | command2

=head2 BUILT-IN FUNCTIONS

A list of built in functions is available from within C<psh> using
the "help" command.

For details about the implementation of built-ins, please see the
B<pshdevel> manpage.

=head1 SPEED AND LIMITATIONS

Depending on the exact commands, B<psh2> is between 2-5 times as fast as
B<psh1> and between 2-10 times slower than B<bash>. Startup time of B<psh2>
is largely determined by the time B<perl> needs to read in the
files belonging to B<psh2>.

All versions of B<psh> are designed for interactive use. We believe that
in an interactive environment, neither the large memory usage of B<psh>
(between 2 and 6 MB, depending on your system, perl version and psh
configuration) nor the slower speed compared to pure perl or the
different other shells are that important.

=head1 REQUIREMENTS

psh needs several optional Perl modules to offer full functionality:

=over 4

=item Term::ReadLine::Gnu or Term::ReadLine::Perl for readline support
(command history, special editing chars etc.).

=item Term::ReadLine::Gnu, Term::Size or Term::ReadKey to offer the
ability to change the environment variables LINES and COLUMNS when the
terminal window size changes while running as standard shell

=item BSD::Resource is necessary for the ulimit builtin

=back


=head1 OTHER PERL SHELLS


=head2 Larry Walls' Perl Shell

Larry Wall exhibits the simple Perl shell C<while (E<lt>E<gt>) { eval; print $@; }> on
page 161 of the Camel Book (2nd Edition).


=head2 lpsh

Lee Eakin E<lt>F<leakin@dfw.nostrum.com>E<gt> has written the Fancy Poor Man's Perl SHell
(called lpsh for Lee's Perl Shell), a simple Perl shell that he has used for a number of
years now (it is derived from Larry Wall's Perl Shell).  He has added some numeric
conversion functions because he often uses it as a calculator.

He has placed it on the web at C<http://www.dfw.nostrum.com/~leakin/psh> (for the
code) and C<http://www.dfw.nostrum.com/~leakin/psh.README> for a short explanation
of the code and a reference to the main Perl Shell site.


=head2 Perl Debugger Shell

Rich Graves E<lt>F<rcgraves@brandeis.edu>E<gt> posted a comment to the original
psh-0.001 announcement on C<http://freshmeat.net>, which contained this
gem that leverages the Perl debugger: C<perl -d -e 1>;


=head2 perlsh

Hiroo Hayashi E<lt>F<hiroo.hayashi@computer.org>E<gt> includes B<perlsh>, a 
``one-line perl evaluator with line editing function and variable name
completion function'' as an example with his Term::ReadLine::Gnu Perl module.


=head2 PSH.pm

In an example of convergent evolution, at C<http://jenda.krynicky.cz/>
there is a Perl shell module called F<PSH.pm> which is quite similar
to this B<psh>. It is designed to provide a command line that can be called
inside some other program via C<PSH::prompt();>, but a small file
F<psh.pl> is also included that uses PSH to provide a standalone
shell.

=head2 SoftList

Some versions of the Perl faq mention an interactive Perl shell called
SoftList, which can still be found at
C<http://www.mit.edu/afs/sipb/contrib/perl/SoftList/>. It predates
Term::Readline and was apparently last touched in 1993, so it seems to
be obsolescent.


=head2 timtosh

Tim Newsome, E<lt>F<nuisance@cmu.edu>E<gt>, has developed a shell he calls
B<timtosh> (There Is More Than One SHell). Per his web site
(C<http://www.wiw.org/~drz/timtosh>),
it is a shell written entirely in Perl. The goal is to get a shell which you
can extend in Perl and can do some other niceties related to
Perl (like perl re file matching). As of 1999-12-13 (Perl Shell 0.004 release date),
Tim says B<timtosh> ``is focused quite differently than B<psh> is, but is currently
still waiting for a rewrite of the command line parsing.
(It has been for almost a year now)''.


=head2 vbsh

Tom Christiansen and Nathan Torkington's book B<Perl Cookbook>, published by
O'Reilly in 1998 (ISBN 1-56592-243-3) has "Example 15-4. vbsh" on page 531 for
section 15.11 (Editing Input). It stands for Very Bad SHell.

=head2 Zoidberg

Jaap Karssenberg and Raoul Zwart actively develop a modular perl shell called
B<Zoidberg>, available at C<http://zoidberg.sourceforge.net/>.

=head1 FILES

F<psh> - The Perl Shell executable script.

F<.pshrc> - The user's Perl Shell `profile'. May be in C<$HOME> or the
current directory; if both are present, both will be read in the order
mentioned.
		
=head1 COPYRIGHT

Copyright (C) 1999-2003 psh Core Team. All rights reserved.
This script is free software. It may be copied or modified according
to the same terms as Perl itself.

 E<lt>F<gregor@focusresearch.com>E<gt>
 E<lt>F<warp-psh@spin.de>E<gt>

=cut
