Projects to be done:

- Proper TAB completion
The API for communication between the Completor object and the frontends has been set. The new ABI does not restrict us to the readline-pecularities, so we can add advanced completion features: optional case insensitive completion for filenames, automatic typo correction etc.

- History support to Psh2.pm
History has to be handled by Psh2.pm and not by the frontends. Some people also really like to use the ! history expansion features, so we optionally have to offer them.

- Prompts
We need prompt support. Later on we can add the psh1 "theme" system.

- Support for ROX Packages and Mac OS X/Gnustep .app executables

- Frontends
The frontends have to be improved. We should focus on editline as low-footprint frontend and a new pure perl frontend. The readline frontend is mainly considered a fallback due to wide availibility and for users who insist on readline. Term::ReadLine::Perl will not be supported this time (nightmare).

Loose-Ideas:
- >{} and <{} redirects
- Auto-directory-changing
- Error Correction - see aibash project for ideas
- we have "sub" already for re-definable Perl subs. We should also have "function" for shell functions and maybe something for C functions.
- A redirection target pseudodevice which copies stuff into the system clipboard

Syntax/Parser additions:
- We so far only do $var and $(var) expansion. ${...} is intended to do
code expansion, unimplemented at the moment.

$(var) is actually POSIXly incorrect (again) - should be ${var}, but that
one is incompatible with psh2 conventions. Do we want a partly-POSIX shell
(it can never be compliant anyway) or should psh2 be consistent? I tend to
the later.

- Syntax extensions for manipulating env vars (substrings, arithmetics)?
Should maybe better be done in Perl I think.

